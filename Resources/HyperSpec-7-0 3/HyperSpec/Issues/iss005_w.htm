<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Issue ADJUST-ARRAY-NOT-ADJUSTABLE Writeup</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="../Issues/iss004_w.htm">
<LINK REL=UP HREF="../Issues/iss005.htm">
<LINK REL=NEXT HREF="../Issues/iss006_w.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="../Issues/iss004_w.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="../Issues/iss005.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="../Issues/iss006_w.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>



<H2>Issue ADJUST-ARRAY-NOT-ADJUSTABLE Writeup</H2>

<PRE>X3J13 accepted v11 Jun 89 on vote of N-1...<P>
<P>
<B>Issue:</B>        <A HREF="iss005.htm">ADJUST-ARRAY-NOT-ADJUSTABLE</A><P>
<B>References:</B>   <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> (p297), <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> (p293),<P>
              <A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>MAKE-ARRAY</B></A> (pp286-289), simple arrays (p28, 289),<P>
              simple strings with fill pointers (p299),<P>
              <A REL=DEFINITION HREF="../Body/f_vec_ps.htm#vector-push-extend"><B>VECTOR-PUSH-EXTEND</B></A> (p296)<P>
<B>Category:</B>     CLARIFICATION and CHANGE<P>
<B>Edit history:</B> 22-Apr-87, Version 1 by Pitman<P>
              15-Nov-88, Versions 2a,2b,2c by Pitman<P>
              02-Dec-88, Version 3 by Pitman<P>
              11-Jan-89, Version 4 by Pitman<P>
              16-Jan-89, Version 5, by Gabriel.  Amended at the meeting to shorten.<P>
              23-Jan-89, Version 6, by Moon.  Shorten without the bug introduced<P>
                        by the amendment, add clarification of <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>SIMPLE-ARRAY</B></A> type.<P>
              15-Feb-89, Version 7, by Pitman. Minor changes per comments from<P>
                        RPG and Dalton.<P>
              11-Mar-89, Version 8, by Pitman. Change category, add endorsements.<P>
              17-Mar-89, Version 9, by Moon, fix wording and examples to make it<P>
                        clear that the semantics of <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>simple-array</B></A> is unchanged.<P>
               6-Jun-89, Version 10, by Moon and Gabriel, do over.<P>
              23-Jun-89, Version 11, by Moon, two little corrections<P>
<P>
<B>Problem Description:<P>
</B><P>
  There are a number of unclear passages in CLtL related to simple arrays<P>
  and adjustable arrays.  There is disagreement on precisely how these<P>
  passages are to be interpreted, and no one is happy with the fact that<P>
  <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> works only on an implementation-dependent subset of arrays.<P>
<P>
  The description of the :ADJUSTABLE option to <A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>MAKE-ARRAY</B></A> on p288 says that<P>
  ``the argument, if specified and not <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A>, indicates that it must be<P>
  possible to alter the array's size dynamically after it is created. This<P>
  argument defaults to <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A>.''  The description of the :ADJUSTABLE option<P>
  does not say what <A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>MAKE-ARRAY</B></A> will do if the argument is unsupplied or<P>
  explicitly <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A>.<P>
<P>
  The description of <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> on p293 says that it is true ``if<P>
  the argument (which must be an array) is adjustable, and otherwise<P>
  false.'' However, the description of <A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>MAKE-ARRAY</B></A> makes it clear that this<P>
  is not necessarily the same as asking if the array was created with<P>
  :ADJUSTABLE T.  If <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> returns <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A>, you know that<P>
  :ADJUSTABLE <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A> was supplied (or no :ADJUSTABLE option was supplied), but<P>
  if <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> returns T, then there is no information about<P>
  whether :ADJUSTABLE was used.<P>
<P>
  The description of <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> on pp297-298 says that it is ``not<P>
  permitted to call <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> on an array that was not created with the<P>
  :ADJUSTABLE option.'' This is inconsistent with <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A>.<P>
<P>
  The definition of <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>SIMPLE-ARRAY</B></A> on p.28 says ``an array that is not<P>
  displaced to another array, has no fill pointer, and is not to have its<P>
  size adjusted dynamically after creation is called a simple array.''<P>
  It is left unclear whether this is an implication or an equivalence,<P>
  i.e. whether there can be other simple arrays as well.<P>
  CLtL p.299 appears to refer to simple strings with fill pointers,<P>
  suggesting that it is an implication, but similar language is used for<P>
  equivalences in other parts of CLtL.<P>
<P>
Proposal (<A HREF="iss005.htm">ADJUST-ARRAY-NOT-ADJUSTABLE:IMPLICIT-COPY</A>)<P>
<P>
  1. If <A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>MAKE-ARRAY</B></A> is called with the :ADJUSTABLE, :FILL-POINTER, <P>
  and :DISPLACED-TO arguments each either unspecified or false, the<P>
  resulting array is a simple array.  (This just repeats what CLtL<P>
  says on page 289, it's here to aid in understanding the next point.)<P>
      <P>
  2. If <A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>MAKE-ARRAY</B></A> is called with one or more of the :ADJUSTABLE,<P>
  :FILL-POINTER, or :DISPLACED-TO arguments true, whether the<P>
  resulting array is simple is unspecified.<P>
<P>
  3. It is permitted to call <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> on any array.  (Remove the<P>
  restriction documented at the bottom of p.297.)<P>
<P>
  4. If <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> is applied to an array created with :ADJUSTABLE true,<P>
  the array returned is <A REL=DEFINITION HREF="../Body/f_eq.htm#eq"><B>EQ</B></A> to its first argument.  It is not specified<P>
  whether <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> returns an array <A REL=DEFINITION HREF="../Body/f_eq.htm#eq"><B>EQ</B></A> to its first argument for any<P>
  other arrays.  If the array returned by <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> is not <A REL=DEFINITION HREF="../Body/f_eq.htm#eq"><B>EQ</B></A> to its<P>
  first argument, the original array is unchanged and does not share<P>
  storage with the new array.<P>
<P>
  5. The predicate <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> is true if and only if <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A><P>
  will return a value <A REL=DEFINITION HREF="../Body/f_eq.htm#eq"><B>EQ</B></A> to this array when given this array as its first<P>
  argument.<P>
<P>
<B>Clarifications and Logical Consequences:<P>
</B><P>
  a. There is no specified way to create an array for which <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A><P>
     definitely returns <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A>.<P>
<P>
  b. There is no specified way to create an array that is non-simple.<P>
<P>
  c. The definition of <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>SIMPLE-ARRAY</B></A> on p.28 is taken to be an implication,<P>
     not an equivalence.  This is either a clarification or a change depending<P>
     on one's prior reading of that definition.<P>
<P>
  d. The meaning of <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> is changed.<P>
<P>
  e. As with such functions as <A REL=DEFINITION HREF="../Body/f_rm_rm.htm#delete"><B>DELETE</B></A> and <A REL=DEFINITION HREF="../Body/f_nconc.htm#nconc"><B>NCONC</B></A>, textbooks should<P>
     instruct programmers to be careful to receive the value returned by<P>
     <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A>, as it might not be <A REL=DEFINITION HREF="../Body/f_eq.htm#eq"><B>EQ</B></A> to the first argument.<P>
<P>
  f. <A REL=DEFINITION HREF="../Body/f_vec_ps.htm#vector-push-extend"><B>VECTOR-PUSH-EXTEND</B></A> still signals an error if given a non-adjustable<P>
     array.  <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A>'s new feature of making a copy cannot be used<P>
     by <A REL=DEFINITION HREF="../Body/f_vec_ps.htm#vector-push-extend"><B>VECTOR-PUSH-EXTEND</B></A>, since there is no way to return the copy to<P>
     the caller.<P>
<P>
<B>Rationale:<P>
</B><P>
  Points 3 and 4 eliminate the problem of <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> only working on a<P>
  subset of arrays, by changing it to work on all arrays.  It remains<P>
  implementation-dependent whether the array is modified in place or<P>
  copied, i.e. whether the result is <A REL=DEFINITION HREF="../Body/f_eq.htm#eq"><B>EQ</B></A> to the argument, however many other<P>
  functions in Common Lisp have similar implementation-dependent behavior.<P>
  Implementation-dependent storage allocation or reuse is considered<P>
  more benign than implementation-dependent applicability of an operation.<P>
<P>
  Point 3 recognizes that <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> offers features that are offered by<P>
  no other function and which are useful in cases involving non-adjustable<P>
  arrays (for what amounts to copying).  This change would allow an<P>
  expression such as:<P>
<P>
    (<A REL=DEFINITION HREF="../Body/s_setq.htm#setq"><B>SETQ</B></A> X (<A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> X ...))<P>
<P>
  to work reliably. Those desiring the old behavior could do:<P>
<P>
    (<A REL=DEFINITION HREF="../Body/s_if.htm#if"><B>IF</B></A> (<A REL=DEFINITION HREF="../Body/a_or.htm#or"><B>OR</B></A> (<A REL=DEFINITION HREF="../Body/a_not.htm#not"><B>NOT</B></A> (<A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> X))<P>
            (<A REL=DEFINITION HREF="../Body/a_not.htm#not"><B>NOT</B></A> (<A REL=DEFINITION HREF="../Body/f_equal.htm#equal"><B>EQUAL</B></A> (<A REL=DEFINITION HREF="../Body/f_ar_ran.htm#array-rank"><B>ARRAY-RANK</B></A> X) (<A REL=DEFINITION HREF="../Body/f_length.htm#length"><B>LENGTH</B></A> NEW-DIMENSIONS))))<P>
        (<A REL=DEFINITION HREF="../Body/a_error.htm#error"><B>ERROR</B></A> &quot;Array cannot be adjusted.&quot;))<P>
  <P>
  to get the old style error checking.<P>
<P>
  Point 5 recycles the name <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> as a test for whether an<P>
  array is adjusted in place or by copying.<P>
<P>
  Point 2 preserves the raison d'etre of simple arrays, which is to <A REL=DEFINITION HREF="../Body/f_provid.htm#provide"><B>provide</B></A><P>
  a portable interface to implementation-dependent specialized arrays that<P>
  trade decreased functionality for faster access.  A proposed alternative<P>
  was to specify a way to create an array that is guaranteed not to be<P>
  simple.  This would have made (<A REL=DEFINITION HREF="../Body/f_typep.htm#typep"><B>typep</B></A> (<A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>make-array</B></A> ...) '<A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>simple-array</B></A>)<P>
  return the same value in all implementations, but would have required<P>
  large changes to some implementations and would be of little benefit to<P>
  users.  Users need to know that certain arrays are simple, so they can<P>
  put in declarations and get higher performance, but users have no need to<P>
  be able to create arrays that are definitely non-simple (for lower<P>
  performance) or definitely non-adjustable.<P>
<P>
<B>Examples:<P>
</B><P>
  1. The following program is conforming.<P>
  <P>
    (<A REL=DEFINITION HREF="../Body/m_defun.htm#defun"><B>defun</B></A> double (a)<P>
      (<A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>adjust-array</B></A> a (* (<A REL=DEFINITION HREF="../Body/f_length.htm#length"><B>length</B></A> a) 2)))<P>
  <P>
    (double (<A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>make-array</B></A> 30))<P>
<P>
  2. The following program is conforming.  In no implementation is the<P>
  type declaration violated.<P>
<P>
    (<A REL=DEFINITION HREF="../Body/s_let_l.htm#let"><B>let</B></A> ((a (<A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>make-array</B></A> 100)))<P>
      (<A REL=DEFINITION HREF="../Body/s_declar.htm#declare"><B>declare</B></A> (<A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>simple-array</B></A> a))<P>
      (frob a))<P>
<P>
  3. The following program is non-conforming.  The consequences of this<P>
  program are undefined because the type declaration is violated in some<P>
  implementations.<P>
<P>
    (<A REL=DEFINITION HREF="../Body/s_let_l.htm#let"><B>let</B></A> ((a (<A REL=DEFINITION HREF="../Body/f_mk_ar.htm#make-array"><B>make-array</B></A> 100 :adjustable t)))<P>
      (<A REL=DEFINITION HREF="../Body/s_declar.htm#declare"><B>declare</B></A> (<A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>simple-array</B></A> a))<P>
      (frob a))<P>
<P>
<B>Current Practice:<P>
</B><P>
  Every correct CLtL implementation conforms to points 1 and 2.  It is<P>
  unlikely that any implementation currently exists that conforms to points<P>
  3, 4, and 5.  Points 3 and 4 involve additions to an implementation to<P>
  support the copying form of <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A>.  Point 5 may involve a change<P>
  to <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> or may be able to use the existing implementation<P>
  of the function.<P>
<P>
  Symbolics Genera makes :ADJUSTABLE <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A> arrays adjustable in most cases,<P>
  and ignores adjustability in deciding whether an array is a <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>SIMPLE-ARRAY</B></A>.<P>
  The arrays that are internally simple in Symbolics Genera are a different<P>
  subset of arrays from the type <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>SIMPLE-ARRAY</B></A>, because simplicity in that<P>
  implementation depends on the rank and total-size as well as on the<P>
  <A REL=DEFINITION HREF="../Body/f_fill_p.htm#fill-pointer"><B>fill-pointer</B></A> and displacement, thus Genera does not use the type<P>
  <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>SIMPLE-ARRAY</B></A> for anything.<P>
<P>
  Lucid, IIM, Ibuki, and Symbolics Cloe make :ADJUSTABLE <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A> arrays<P>
  non-adjustable in all cases, and make every array non-simple that CLTL<P>
  does not <A REL=DEFINITION HREF="../Body/f_provid.htm#require"><B>require</B></A> to be simple.<P>
<P>
  Macintosh Allegro Common Lisp v1.2 makes :ADJUSTABLE <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A> arrays<P>
  non-adjustable in all cases, makes all arrays of rank other than 1<P>
  non-simple (violating point 1), and makes every array non-simple that<P>
  CLTL does not <A REL=DEFINITION HREF="../Body/f_provid.htm#require"><B>require</B></A> to be simple.<P>
<P>
<B>Cost to Implementors:<P>
</B><P>
  The change to <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> is easy.  The change to <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> may<P>
  involve some complex coding but should not be a large task.  No changes<P>
  are required to anything connected with <A REL=DEFINITION HREF="../Body/t_smp_ar.htm#simple-array"><B>SIMPLE-ARRAY</B></A>.<P>
<P>
<B>Cost to Users:<P>
</B><P>
  None in code that does not call <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A>.  This is a fully<P>
  upward-compatible change from the user's standpoint.<P>
<P>
<B>Benefits:<P>
</B><P>
  Programs that use simple arrays and/or adjust arrays will be easier<P>
  to port, as the language specification for these features will be<P>
  clearer.  More programs will be able to call <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A>, as its use<P>
  will not be restricted to a subset of arrays.<P>
<P>
<B>Non-Benefits:<P>
</B><P>
  Users who expect adjusting arrays created with :ADJUSTABLE <A REL=DEFINITION HREF="../Body/a_nil.htm#nil"><B>NIL</B></A> to signal<P>
  an error would not get the desired signal.  A few programs might have<P>
  porting problems due to variation among implementations of whether the<P>
  result of <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> is <A REL=DEFINITION HREF="../Body/f_eq.htm#eq"><B>EQ</B></A> to the first argument.<P>
<P>
<B>Aesthetics:<P>
</B><P>
  Most people believe the status quo is unaesthetic.  Having an aspect of<P>
  the language more clearly specified is an aesthetic improvement.<P>
  Allowing <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> on all arrays is an aesthetic improvement.<P>
<P>
<B>Discussion:<P>
</B><P>
  There are at least 110 messages of discussion preceding this version of the<P>
  proposal.  It does not seem feasible to summarize them here.<P>
<P>
  Dick Gabriel, Dave Moon, and Guy Steele support this proposal.<P>
<P>
  Some commentors would like to get rid of <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A>, since<P>
  <A REL=DEFINITION HREF="../Body/f_adjust.htm#adjust-array"><B>ADJUST-ARRAY</B></A> now works on all arrays.  Other commentors have said that<P>
  <A REL=DEFINITION HREF="../Body/f_adju_1.htm#adjustable-array-p"><B>ADJUSTABLE-ARRAY-P</B></A> is still needed in some applications, such as user<P>
  written functions that behave like <A REL=DEFINITION HREF="../Body/f_vec_ps.htm#vector-push-extend"><B>VECTOR-PUSH-EXTEND</B></A>, and hence should<P>
  be kept; the concept of &quot;adjustable array&quot; is still meaningful.<P>
</PRE>
<HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
