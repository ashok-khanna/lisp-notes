<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Function REVAPPEND, NRECONC</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="f_append.htm">
<LINK REL=UP HREF="c_conses.htm">
<LINK REL=NEXT HREF="f_butlas.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="f_append.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_conses.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="f_butlas.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="revappend"><A NAME="nreconc"><I>Function</I> <B>REVAPPEND, NRECONC</B></A></A> <P>
 <P>
<P><B>Syntax:</B><P>
 <P>

<B>revappend</B> <I>list tail</I> =&gt; <I>result-list</I><P>
 
<B>nreconc</B> <I>list tail</I> =&gt; <I>result-list</I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
<I>list</I>---a <A REL=DEFINITION HREF="26_glo_p.htm#proper_list"><I>proper list</I></A>. <P>
<I>tail</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>result-list</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<P><B>Description:</B><P>
 <P>
<A REL=DEFINITION HREF="#revappend"><B>revappend</B></A> constructs a <A REL=DEFINITION HREF="26_glo_c.htm#copy"><I>copy</I></A>[2] of <I>list</I>, but with the <A REL=DEFINITION HREF="26_glo_e.htm#element"><I>elements</I></A> in reverse order. It then appends (as if by <A REL=DEFINITION HREF="f_nconc.htm#nconc"><B>nconc</B></A>) the <I>tail</I> to that reversed list and returns the result. <P>
<A REL=DEFINITION HREF="#nreconc"><B>nreconc</B></A> reverses the order of <A REL=DEFINITION HREF="26_glo_e.htm#element"><I>elements</I></A> in <I>list</I> (as if by <A REL=DEFINITION HREF="f_revers.htm#nreverse"><B>nreverse</B></A>). It then appends (as if by <A REL=DEFINITION HREF="f_nconc.htm#nconc"><B>nconc</B></A>) the <I>tail</I> to that reversed list and returns the result. <P>
The resulting <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> shares <A REL=DEFINITION HREF="26_glo_l.htm#list_structure"><I>list structure</I></A> with <I>tail</I>. <P>
<P><B>Examples:</B><P>
 <P>
<PRE>
 (let ((list-1 (list 1 2 3))
       (list-2 (list 'a 'b 'c)))
   (print (revappend list-1 list-2))
   (print (equal list-1 '(1 2 3)))
   (print (equal list-2 '(a b c))))
&gt;&gt;  (3 2 1 A B C) 
&gt;&gt;  T
&gt;&gt;  T
=&gt;  T

 (revappend '(1 2 3) '()) =&gt;  (3 2 1)
 (revappend '(1 2 3) '(a . b)) =&gt;  (3 2 1 A . B)
 (revappend '() '(a b c)) =&gt;  (A B C)
 (revappend '(1 2 3) 'a) =&gt;  (3 2 1 . A)
 (revappend '() 'a) =&gt;  A   ;degenerate case

 (let ((list-1 '(1 2 3))
       (list-2 '(a b c)))
   (print (nreconc list-1 list-2))
   (print (equal list-1 '(1 2 3)))
   (print (equal list-2 '(a b c))))
&gt;&gt;  (3 2 1 A B C) 
&gt;&gt;  NIL
&gt;&gt;  T
=&gt;  T

</PRE>
</TT> <P>
<P><B>Side Effects:</B><P>
 <P>
<A REL=DEFINITION HREF="#revappend"><B>revappend</B></A> does not modify either of its <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A>. <A REL=DEFINITION HREF="#nreconc"><B>nreconc</B></A> is permitted to modify <I>list</I> but not <I>tail</I>. <P>
 Although it might be implemented differently, <A REL=DEFINITION HREF="#nreconc"><B>nreconc</B></A> is constrained to have side-effect behavior equivalent to: <P>
<PRE>
 (nconc (nreverse list) tail)
</PRE>
</TT>  <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B> None.
 <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="f_revers.htm#reverse"><B>reverse</B></A>, <A REL=DEFINITION HREF="f_revers.htm#nreverse"><B>nreverse</B></A>, <A REL=DEFINITION HREF="f_nconc.htm#nconc"><B>nconc</B></A> <P>
<P><B>Notes:</B><P>
 <P>
The following functional equivalences are true, although good <A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>implementations</I></A> will typically use a faster algorithm for achieving the same effect: <P>
<PRE>
 (revappend list tail) ==  (nconc (reverse list) tail)
 (nreconc list tail) ==  (nconc (nreverse list) tail)
</PRE>
</TT> <P>
 <P>
<P><HR>The following <A REL=META HREF="../Front/X3J13Iss.htm">X3J13 cleanup issues</A>, <I>not part of the specification</I>, apply to this section:<P><UL><LI> <A REL=CHILD HREF="../Issues/iss293.htm">REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89</A><LI> <A REL=CHILD HREF="../Issues/iss138.htm">DOTTED-LIST-ARGUMENTS:CLARIFY</A><P></UL><HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
