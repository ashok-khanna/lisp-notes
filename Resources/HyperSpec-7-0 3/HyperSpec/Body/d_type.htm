<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Declaration TYPE</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="d_dynami.htm">
<LINK REL=UP HREF="c_evalua.htm">
<LINK REL=NEXT HREF="d_inline.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="d_dynami.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_evalua.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="d_inline.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="type"><I>Declaration</I> <B>TYPE</B></A> <P>
<P><B>Syntax:</B><P>
 <P>
<TT>(type </TT><I>typespec</I><TT> </TT><I>var</I><TT></TT><B>*</B><TT>)</TT> <P>
<TT>(</TT><I>typespec</I><TT> </TT><I>var</I><TT></TT><B>*</B><TT>)</TT> <P>
<P><B>Arguments:</B><P>
 <P>
<I>typespec</I>---a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A>. <P>
<I>var</I>---a <A REL=DEFINITION HREF="26_glo_v.htm#variable"><I>variable</I></A> <A REL=DEFINITION HREF="26_glo_n.htm#name"><I>name</I></A>. <P>
<P><B>Valid Context:</B><P>
 <P>
<A REL=DEFINITION HREF="26_glo_d.htm#declaration"><I>declaration</I></A> or <A REL=DEFINITION HREF="26_glo_p.htm#proclamation"><I>proclamation</I></A> <P>
<P><B>Binding Types Affected:</B><P>
 <P>
<A REL=DEFINITION HREF="26_glo_v.htm#variable"><I>variable</I></A> <P>
<P><B>Description:</B><P>
 <P>
Affects only variable <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>bindings</I></A> and specifies that the <I>vars</I> take on values only of the specified <I>typespec</I>. In particular, values assigned to the variables by <A REL=DEFINITION HREF="s_setq.htm#setq"><B>setq</B></A>, as well as the initial values of the <I>vars</I> must be of the specified <I>typespec</I>. <A REL=DEFINITION HREF="#type"><B>type</B></A> declarations never apply to function <A REL=DEFINITION HREF="26_glo_b.htm#binding"><I>bindings</I></A> (see <A REL=DEFINITION HREF="d_ftype.htm#ftype"><B>ftype</B></A>). <P>
 A type declaration of a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> defined by <A REL=DEFINITION HREF="s_symbol.htm#symbol-macrolet"><B>symbol-macrolet</B></A> is equivalent to wrapping a <A REL=DEFINITION HREF="s_the.htm#the"><B>the</B></A> expression around the expansion of that <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A>,   although the <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A>'s <A REL=DEFINITION HREF="26_glo_m.htm#macro_expansion"><I>macro expansion</I></A> is not actually affected.  <P>
 <P>
The meaning of a type declaration is equivalent to changing each reference to a variable (<I>var</I>) within the scope of the declaration to <TT>(the </TT><I>typespec</I><TT> </TT><I>var</I><TT>)</TT>, changing each expression assigned to the variable (<I>new-value</I>) within the scope of the declaration to <TT>(the </TT><I>typespec</I><TT> </TT><I>new-value</I><TT>)</TT>, and executing <TT>(the </TT><I>typespec</I><TT> </TT><I>var</I><TT>)</TT> at the moment the scope of the declaration is entered. <P>
A <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> declaration is valid in all declarations. The interpretation of a type declaration is as follows: <P><DL><DT>1.  During the execution of any reference to the declared variable within the scope of the declaration, the consequences are undefined if the value of the declared variable is not of the declared <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. <P><DD>
<DT>2.  During the execution of any <A REL=DEFINITION HREF="s_setq.htm#setq"><B>setq</B></A> of the declared variable within the scope of the declaration, the consequences are undefined if the newly assigned value of the declared variable is not of the declared <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. <P><DD>
<DT>3.  At the moment the scope of the declaration is entered, the consequences are undefined if the value of the declared variable is not of the declared <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. <P><DD></DL><P>
A <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> declaration affects only variable references within its scope. <P>
If nested <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> declarations refer to the same variable, then the value of the variable must be a member of the intersection of the declared <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A>.  <P>
 If there is a local <TT>type</TT> declaration for a dynamic variable, and there is also a global <TT>type</TT> proclamation for that same variable, then the value of the variable within the scope of the local declaration must be a member of the intersection of the two declared <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A>.  <P>
<A REL=DEFINITION HREF="#type"><B>type</B></A> declarations can be <A REL=DEFINITION HREF="26_glo_f.htm#free_declaration"><I>free declarations</I></A> or <A REL=DEFINITION HREF="26_glo_b.htm#bound_declaration"><I>bound declarations</I></A>. <P>
 A <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> cannot be both the name of a <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> and the name of a declaration. Defining a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> as the <A REL=DEFINITION HREF="26_glo_n.htm#name"><I>name</I></A> of a <A REL=DEFINITION HREF="26_glo_c.htm#class"><I>class</I></A>, <A REL=DEFINITION HREF="26_glo_s.htm#structure"><I>structure</I></A>, <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>condition</I></A>, or <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>, when the <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> has been <I>declared</I> as a declaration name, or vice versa, signals an error.  <P>
 Within the <A REL=DEFINITION HREF="26_glo_l.htm#lexical_scope"><I>lexical scope</I></A> of an <A REL=DEFINITION HREF="t_array.htm#array"><B>array</B></A> type declaration, all references to <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>array</I></A> <A REL=DEFINITION HREF="26_glo_e.htm#element"><I>elements</I></A> are assumed to satisfy the <A REL=DEFINITION HREF="26_glo_e.htm#expressed_array_element_type"><I>expressed array element type</I></A> (as opposed to the <A REL=DEFINITION HREF="26_glo_u.htm#upgraded_array_element_type"><I>upgraded array element type</I></A>). A compiler can treat the code within the scope of the <A REL=DEFINITION HREF="t_array.htm#array"><B>array</B></A> type declaration as if each <A REL=DEFINITION HREF="26_glo_a.htm#access"><I>access</I></A> of an <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>array</I></A> <A REL=DEFINITION HREF="26_glo_e.htm#element"><I>element</I></A> were surrounded by an appropriate <A REL=DEFINITION HREF="s_the.htm#the"><B>the</B></A> form.  <P>
<P><B>Examples:</B><P>
 <P>
<PRE>
 (defun f (x y)
   (declare (type fixnum x y))
   (let ((z (+ x y)))
     (declare (type fixnum z))
     z)) =&gt;  F
 (f 1 2) =&gt;  3
 ;; The previous definition of F is equivalent to
 (defun f (x y)
   ;; This declaration is a shorthand form of the TYPE declaration
   (declare (fixnum x y))
   ;; To declare the type of a return value, it's not necessary to
   ;; create a named variable.  A THE special form can be used instead.
   (the fixnum (+ x y))) =&gt;  F
 (f 1 2) =&gt;  3
</PRE>
</TT> <P>
 <P>
<PRE>
 (defvar *one-array* (make-array 10 :element-type '(signed-byte 5)))
 (defvar *another-array* (make-array 10 :element-type '(signed-byte 8)))
  
 (defun frob (an-array)
   (declare (type (array (signed-byte 5) 1) an-array))
   (setf (aref an-array 1) 31)
   (setf (aref an-array 2) 127)
   (setf (aref an-array 3) (* 2 (aref an-array 3)))
   (let ((foo 0))
     (declare (type (signed-byte 5) foo))
     (setf foo (aref an-array 0))))
  
 (frob *one-array*)
 (frob *another-array*)
</PRE>
</TT> <P>
<P>
The above definition of <TT>frob</TT> is equivalent to: <P>
<PRE>
 (defun frob (an-array)
   (setf (the (signed-byte 5) (aref an-array 1)) 31)
   (setf (the (signed-byte 5) (aref an-array 2)) 127)
   (setf (the (signed-byte 5) (aref an-array 3))
         (* 2 (the (signed-byte 5) (aref an-array 3))))
   (let ((foo 0))
     (declare (type (signed-byte 5) foo))
     (setf foo (the (signed-byte 5) (aref an-array 0)))))
</PRE>
</TT> <P>
Given an implementation in which <I>fixnums</I> are 29 bits but <A REL=DEFINITION HREF="t_fixnum.htm#fixnum"><B>fixnum</B></A> <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A> are upgraded to signed 32-bit <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A>, the following could be compiled with all <A REL=DEFINITION HREF="26_glo_f.htm#fixnum"><I>fixnum</I></A> arithmetic: <P>
<PRE>
 (defun bump-counters (counters)
   (declare (type (array fixnum *) bump-counters))
   (dotimes (i (length counters))
     (incf (aref counters i))))
</PRE>
</TT>  <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="s_declar.htm#declare"><B>declare</B></A>, <A REL=DEFINITION HREF="m_declai.htm#declaim"><B>declaim</B></A>, <A REL=DEFINITION HREF="f_procla.htm#proclaim"><B>proclaim</B></A> <P>
<P><B>Notes:</B><P>
 <P>
<TT>(</TT><I>typespec</I><TT> </TT><I>var</I><TT></TT><B>*</B><TT>)</TT> is an abbreviation for <TT>(type </TT><I>typespec</I><TT> </TT><I>var</I><TT></TT><B>*</B><TT>)</TT>.   <P>
A <A REL=DEFINITION HREF="#type"><B>type</B></A> declaration for the arguments to a function does not necessarily imply anything about the type of the result. The following function is not permitted to be compiled using <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent"><I>implementation-dependent</I></A> <A REL=DEFINITION HREF="26_glo_f.htm#fixnum"><I>fixnum</I></A>-only arithmetic: <P>
<PRE>
 (defun f (x y) (declare (fixnum x y)) (+ x y))
</PRE>
</TT> <P>
To see why, consider <TT>(f most-positive-fixnum 1)</TT>. Common Lisp defines that <TT>F</TT> must return a <A REL=DEFINITION HREF="t_bignum.htm#bignum"><I>bignum</I></A> here, rather than signal an error or produce a mathematically incorrect result. If you have special knowledge such ``<A REL=DEFINITION HREF="26_glo_f.htm#fixnum"><I>fixnum</I></A> overflow'' cases will not come up, you can declare the result value to be in the <A REL=DEFINITION HREF="26_glo_f.htm#fixnum"><I>fixnum</I></A> range, enabling some compilers to use more efficient arithmetic: <P>
<PRE>
 (defun f (x y)
   (declare (fixnum x y))
   (the fixnum (+ x y)))
</PRE>
</TT> <P>
Note, however, that in the three-argument case, because of the possibility of an implicit intermediate value growing too large, the following will not cause <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent"><I>implementation-dependent</I></A> <A REL=DEFINITION HREF="26_glo_f.htm#fixnum"><I>fixnum</I></A>-only arithmetic to be used: <P>
<PRE>
 (defun f (x y)
   (declare (fixnum x y z))
   (the fixnum (+ x y z)))
</PRE>
</TT> <P>
To see why, consider <TT>(f most-positive-fixnum 1 -1).</TT> Although the arguments and the result are all <I>fixnums</I>, an intermediate value is not a <A REL=DEFINITION HREF="26_glo_f.htm#fixnum"><I>fixnum</I></A>. If it is important that <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent"><I>implementation-dependent</I></A> <A REL=DEFINITION HREF="26_glo_f.htm#fixnum"><I>fixnum</I></A>-only arithmetic be selected in <A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>implementations</I></A> that provide it, consider writing something like this instead: <P>
<PRE>
 (defun f (x y)
   (declare (fixnum x y z))
   (the fixnum (+ (the fixnum (+ x y)) z)))
</PRE>
</TT> <P>
<P><HR>The following <A REL=META HREF="../Front/X3J13Iss.htm">X3J13 cleanup issues</A>, <I>not part of the specification</I>, apply to this section:<P><UL><LI> <A REL=CHILD HREF="../Issues/iss093.htm">DECLARE-ARRAY-TYPE-ELEMENT-REFERENCES:RESTRICTIVE</A><LI> <A REL=CHILD HREF="../Issues/iss349.htm">TYPE-DECLARATION-ABBREVIATION:ALLOW-ALL</A><LI> <A REL=CHILD HREF="../Issues/iss322.htm">SPECIAL-TYPE-SHADOWING:CLARIFY</A><LI> <A REL=CHILD HREF="../Issues/iss096.htm">DECLARE-TYPE-FREE:LEXICAL</A><LI> <A REL=CHILD HREF="../Issues/iss339.htm">SYMBOL-MACROLET-TYPE-DECLARATION:NO</A><LI> <A REL=CHILD HREF="../Issues/iss337.htm">SYMBOL-MACROLET-DECLARE:ALLOW</A><P></UL><HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
