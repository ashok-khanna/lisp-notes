<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Function SUBST, SUBST-IF, SUBST-IF-NOT...</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="f_sublis.htm">
<LINK REL=UP HREF="c_conses.htm">
<LINK REL=NEXT HREF="f_tree_e.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="f_sublis.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_conses.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="f_tree_e.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="subst"><A NAME="subst-if"><A NAME="subst-if-not"><A NAME="nsubst"><A NAME="nsubst-if"><A NAME="nsubst-if-not"><I>Function</I> <B>SUBST, SUBST-IF, SUBST-IF-NOT, NSUBST, NSUBST-IF, NSUBST-IF-NOT</B></A></A></A></A></A></A> <P>
<P><B>Syntax:</B><P>
 <P>

<B>subst</B> <I>new old tree <TT>&amp;key</TT> key test test-not</I> =&gt; <I>new-tree</I><P>
 
<B>subst-if</B> <I>new predicate tree <TT>&amp;key</TT> key</I> =&gt; <I>new-tree</I><P>
 
<B>subst-if-not</B> <I>new predicate tree <TT>&amp;key</TT> key</I> =&gt; <I>new-tree</I><P>
 <P>

<B>nsubst</B> <I>new old tree <TT>&amp;key</TT> key test test-not</I> =&gt; <I>new-tree</I><P>
 
<B>nsubst-if</B> <I>new predicate tree <TT>&amp;key</TT> key</I> =&gt; <I>new-tree</I><P>
 
<B>nsubst-if-not</B> <I>new predicate tree <TT>&amp;key</TT> key</I> =&gt; <I>new-tree</I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
<I>new</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>old</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>predicate</I>---a <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>symbol</I></A> that names a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A>, or a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of one argument that returns a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A> value. <P>
 <I>tree</I>---a <A REL=DEFINITION HREF="26_glo_t.htm#tree"><I>tree</I></A>.  <P>
<I>test</I>---a <A REL=DEFINITION HREF="26_glo_d.htm#designator"><I>designator</I></A> for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of two <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A> that returns a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<I>test-not</I>---a <A REL=DEFINITION HREF="26_glo_d.htm#designator"><I>designator</I></A> for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of two <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A> that returns a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<I>key</I>---a <A REL=DEFINITION HREF="26_glo_d.htm#designator"><I>designator</I></A> for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of one argument, or <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>. <P>
 <I>new-tree</I>---a <A REL=DEFINITION HREF="26_glo_t.htm#tree"><I>tree</I></A>.  <P>
<P><B>Description:</B><P>
 <P>
<A REL=DEFINITION HREF="#subst"><B>subst</B></A>, <A REL=DEFINITION HREF="#subst-if"><B>subst-if</B></A>, and <A REL=DEFINITION HREF="#subst-if-not"><B>subst-if-not</B></A> perform substitution operations on <I>tree</I>. Each function searches <I>tree</I> for occurrences of a particular <I>old</I> item of an element or subexpression that <I>satisfies the test</I>. <P>
<A REL=DEFINITION HREF="#nsubst"><B>nsubst</B></A>, <A REL=DEFINITION HREF="#nsubst-if"><B>nsubst-if</B></A>, and <A REL=DEFINITION HREF="#nsubst-if-not"><B>nsubst-if-not</B></A> are like <A REL=DEFINITION HREF="#subst"><B>subst</B></A>, <A REL=DEFINITION HREF="#subst-if"><B>subst-if</B></A>, and <A REL=DEFINITION HREF="#subst-if-not"><B>subst-if-not</B></A> respectively, except that the original <I>tree</I> is modified. <P>
<A REL=DEFINITION HREF="#subst"><B>subst</B></A> makes a copy of <I>tree</I>, substituting <I>new</I> for every subtree or leaf of <I>tree</I> (whether the subtree or leaf is a <A REL=DEFINITION HREF="26_glo_c.htm#car"><I>car</I></A> or a <A REL=DEFINITION HREF="26_glo_c.htm#cdr"><I>cdr</I></A> of its parent) such that <I>old</I> and the subtree or leaf <A REL=DEFINITION HREF="26_glo_s.htm#satisfy_the_test"><I>satisfy the test</I></A>. <P>
<A REL=DEFINITION HREF="#nsubst"><B>nsubst</B></A> is a destructive version of <A REL=DEFINITION HREF="#subst"><B>subst</B></A>. The list structure of <I>tree</I> is altered by destructively replacing with <I>new</I> each leaf of the <I>tree</I> such that <I>old</I> and the leaf <A REL=DEFINITION HREF="26_glo_s.htm#satisfy_the_test"><I>satisfy the test</I></A>. <P>
For <A REL=DEFINITION HREF="#subst"><B>subst</B></A>, <A REL=DEFINITION HREF="#subst-if"><B>subst-if</B></A>, and <A REL=DEFINITION HREF="#subst-if-not"><B>subst-if-not</B></A>, if the functions succeed, a new copy of the tree is returned in which each occurrence of such an element is replaced by the <I>new</I> element or subexpression. If no changes are made, the original <I>tree</I> may be returned. The original <I>tree</I> is left unchanged, but the result tree may share storage with it. <P>
For <A REL=DEFINITION HREF="#nsubst"><B>nsubst</B></A>, <A REL=DEFINITION HREF="#nsubst-if"><B>nsubst-if</B></A>, and <A REL=DEFINITION HREF="#nsubst-if-not"><B>nsubst-if-not</B></A> the original <I>tree</I> is modified and returned as the function result, but the result may not be <A REL=DEFINITION HREF="f_eq.htm#eq"><B>eq</B></A> to <I>tree</I>. <P>
<P><B>Examples:</B><P>
 <P>
<PRE>
 (setq tree1 '(1 (1 2) (1 2 3) (1 2 3 4))) =&gt;  (1 (1 2) (1 2 3) (1 2 3 4))
 (subst &quot;two&quot; 2 tree1) =&gt;  (1 (1 &quot;two&quot;) (1 &quot;two&quot; 3) (1 &quot;two&quot; 3 4))
 (subst &quot;five&quot; 5 tree1) =&gt;  (1 (1 2) (1 2 3) (1 2 3 4))
 (eq tree1 (subst &quot;five&quot; 5 tree1)) =&gt;  <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent">implementation-dependent</A>
 (subst 'tempest 'hurricane
        '(shakespeare wrote (the hurricane)))
=&gt;  (SHAKESPEARE WROTE (THE TEMPEST))
 (subst 'foo 'nil '(shakespeare wrote (twelfth night)))
=&gt;  (SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO)
 (subst '(a . cons) '(old . pair)
        '((old . spice) ((old . shoes) old . pair) (old . pair))
        :test #'equal)
=&gt;  ((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS))

 (subst-if 5 #'listp tree1) =&gt;  5
 (subst-if-not '(x) #'consp tree1) 
=&gt;  (1 X)

 tree1 =&gt;  (1 (1 2) (1 2 3) (1 2 3 4))
 (nsubst 'x 3 tree1 :key #'(lambda (y) (and (listp y) (third y)))) 
=&gt;  (1 (1 2) X X)
 tree1 =&gt;  (1 (1 2) X X)
</PRE>
</TT> <P>
<P><B>Side Effects:</B><P>
 <P>
<A REL=DEFINITION HREF="#nsubst"><B>nsubst</B></A>, <A REL=DEFINITION HREF="#nsubst-if"><B>nsubst-if</B></A>, and <A REL=DEFINITION HREF="#nsubst-if-not"><B>nsubst-if-not</B></A> might alter the <A REL=DEFINITION HREF="26_glo_t.htm#tree_structure"><I>tree structure</I></A> of <I>tree</I>. <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B> None.
 <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="f_sbs_s.htm#substitute"><B>substitute</B></A>, <A REL=DEFINITION HREF="f_sbs_s.htm#nsubstitute"><B>nsubstitute</B></A>,  <A REL=CHILD HREF="03_ba.htm">Section 3.2.1 (Compiler Terminology)</A>,   <A REL=CHILD HREF="03_f.htm">Section 3.6 (Traversal Rules and Side Effects)</A>  <P>
<P><B>Notes:</B><P>
 <P>
 The <TT>:test-not</TT> parameter is deprecated.  <P>
 The functions <A REL=DEFINITION HREF="#subst-if-not"><B>subst-if-not</B></A> and <A REL=DEFINITION HREF="#nsubst-if-not"><B>nsubst-if-not</B></A> are deprecated.  <P>
One possible definition of <A REL=DEFINITION HREF="#subst"><B>subst</B></A>: <P>
<PRE>
 (defun subst (old new tree &amp;rest x &amp;key test test-not key)
   (cond ((satisfies-the-test old tree :test test
                              :test-not test-not :key key)
          new)
         ((atom tree) tree)
         (t (let ((a (apply #'subst old new (car tree) x))
                  (d (apply #'subst old new (cdr tree) x)))
              (if (and (eql a (car tree))
                       (eql d (cdr tree)))
                  tree
                  (cons a d))))))
</PRE>
</TT> <P><HR>The following <A REL=META HREF="../Front/X3J13Iss.htm">X3J13 cleanup issues</A>, <I>not part of the specification</I>, apply to this section:<P><UL><LI> <A REL=CHILD HREF="../Issues/iss345.htm">TEST-NOT-IF-NOT:FLUSH-ALL</A><LI> <A REL=CHILD HREF="../Issues/iss240.htm">MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE</A><LI> <A REL=CHILD HREF="../Issues/iss083.htm">CONSTANT-MODIFICATION:DISALLOW</A><LI> <A REL=CHILD HREF="../Issues/iss138.htm">DOTTED-LIST-ARGUMENTS:CLARIFY</A><P></UL><HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
