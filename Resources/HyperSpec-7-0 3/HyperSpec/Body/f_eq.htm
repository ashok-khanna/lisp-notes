<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Function EQ</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="v_t.htm">
<LINK REL=UP HREF="c_data_a.htm">
<LINK REL=NEXT HREF="f_eql.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="v_t.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_data_a.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="f_eql.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="eq"><I>Function</I> <B>EQ</B></A> <P>
<P><B>Syntax:</B><P>
 <P>

<B>eq</B> <I>x y</I> =&gt; <I>generalized-boolean</I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
<I>x</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>y</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>generalized-boolean</I>---a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<P><B>Description:</B><P>
 <P>
Returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> if its <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A> are the same, identical <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>; otherwise, returns <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>. <P>
<P><B>Examples:</B><P>
 
<PRE>
 (eq 'a 'b) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq 'a 'a) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (eq 3 3)
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
OR=&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq 3 3.0) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq 3.0 3.0)
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
OR=&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq #c(3 -4) #c(3 -4))
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
OR=&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq #c(3 -4.0) #c(3 -4)) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq (cons 'a 'b) (cons 'a 'c)) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq (cons 'a 'b) (cons 'a 'b)) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq '(a . b) '(a . b))
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
OR=&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (progn (setq x (cons 'a 'b)) (eq x x)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (progn (setq x '(a . b)) (eq x x)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (eq #\A #\A)
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
OR=&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (let ((x &quot;Foo&quot;)) (eq x x)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (eq &quot;Foo&quot; &quot;Foo&quot;)
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
OR=&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq &quot;Foo&quot; (copy-seq &quot;Foo&quot;)) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq &quot;FOO&quot; &quot;foo&quot;) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (eq &quot;string-seq&quot; (copy-seq &quot;string-seq&quot;)) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (let ((x 5)) (eq x x))
=&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
OR=&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
</PRE>
</TT> <P>
<P><B>Side Effects:</B> None.
 <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B> None.
 <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="f_eql.htm#eql"><B>eql</B></A>, <A REL=DEFINITION HREF="f_equal.htm#equal"><B>equal</B></A>, <A REL=DEFINITION HREF="f_equalp.htm#equalp"><B>equalp</B></A>, <A REL=DEFINITION HREF="f_eq_sle.htm#EQ"><B>=</B></A>, <A REL=CHILD HREF="03_b.htm">Section 3.2 (Compilation)</A> <P>
<P><B>Notes:</B><P>
 <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>Objects</I></A> that appear the same when printed are not necessarily <A REL=DEFINITION HREF="#eq"><B>eq</B></A> to each other. <A REL=DEFINITION HREF="26_glo_s.htm#symbol"><I>Symbols</I></A> that print the same usually are <A REL=DEFINITION HREF="#eq"><B>eq</B></A> to each other because of the use of the <A REL=DEFINITION HREF="f_intern.htm#intern"><B>intern</B></A> function. However, <A REL=DEFINITION HREF="26_glo_n.htm#number"><I>numbers</I></A> with the same value need not be <A REL=DEFINITION HREF="#eq"><B>eq</B></A>, and two similar <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>lists</I></A> are usually not <A REL=DEFINITION HREF="26_glo_i.htm#identical"><I>identical</I></A>. <P>
An implementation is permitted to make ``copies'' of <A REL=DEFINITION HREF="26_glo_c.htm#character"><I>characters</I></A> and <A REL=DEFINITION HREF="26_glo_n.htm#number"><I>numbers</I></A> at any time. The effect is that Common Lisp makes no guarantee that <A REL=DEFINITION HREF="#eq"><B>eq</B></A> is true even when both its arguments are ``the same thing'' if that thing is a <A REL=DEFINITION HREF="26_glo_c.htm#character"><I>character</I></A> or <A REL=DEFINITION HREF="26_glo_n.htm#number"><I>number</I></A>. <P>
Most Common Lisp <A REL=DEFINITION HREF="26_glo_o.htm#operator"><I>operators</I></A> use <A REL=DEFINITION HREF="f_eql.htm#eql"><B>eql</B></A> rather than <A REL=DEFINITION HREF="#eq"><B>eq</B></A> to compare objects, or else they default to <A REL=DEFINITION HREF="f_eql.htm#eql"><B>eql</B></A> and only use <A REL=DEFINITION HREF="#eq"><B>eq</B></A> if specifically requested to do so. However, the following <A REL=DEFINITION HREF="26_glo_o.htm#operator"><I>operators</I></A> are defined to use <A REL=DEFINITION HREF="#eq"><B>eq</B></A> rather than <A REL=DEFINITION HREF="f_eql.htm#eql"><B>eql</B></A> in a way that cannot be overridden by the <A REL=DEFINITION HREF="26_glo_c.htm#code"><I>code</I></A> which employs them: <P>
<PRE>
<A REL=DEFINITION HREF="s_catch.htm#catch">catch</A>           <A REL=DEFINITION HREF="f_getf.htm#getf">getf</A>     <A REL=DEFINITION HREF="s_throw.htm#throw">throw</A>  
<A REL=DEFINITION HREF="f_get.htm#get">get</A>             <A REL=DEFINITION HREF="m_remf.htm#remf">remf</A>            
<A REL=DEFINITION HREF="f_get_pr.htm#get-properties">get-properties</A>  <A REL=DEFINITION HREF="f_rempro.htm#remprop">remprop</A>  
</PRE>
<P><B>Figure 5-11.  Operators that always prefer EQ over EQL</B> <P>
<HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
