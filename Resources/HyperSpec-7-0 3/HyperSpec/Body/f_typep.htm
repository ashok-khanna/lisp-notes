<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Function TYPEP</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="f_tp_of.htm">
<LINK REL=UP HREF="c_types_.htm">
<LINK REL=NEXT HREF="e_tp_err.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="f_tp_of.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_types_.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="e_tp_err.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="typep"><I>Function</I> <B>TYPEP</B></A> <P>
 <P>
<P><B>Syntax:</B><P>
 <P>

<B>typep</B> <I>object type-specifier <TT>&amp;optional</TT> environment</I> =&gt; <I>generalized-boolean</I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
<I>object</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>type-specifier</I>---any <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> except <A REL=DEFINITION HREF="a_values.htm#values"><B>values</B></A>, or a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> list whose first element is either <A REL=DEFINITION HREF="a_fn.htm#function"><B>function</B></A> or <A REL=DEFINITION HREF="a_values.htm#values"><B>values</B></A>. <P>
<I>environment</I>---an <A REL=DEFINITION HREF="26_glo_e.htm#environment"><I>environment</I></A> <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. The default is <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>, denoting the <A REL=DEFINITION HREF="26_glo_n.htm#null_lexical_environment"><I>null lexical environment</I></A> and the and current <A REL=DEFINITION HREF="26_glo_g.htm#global_environment"><I>global environment</I></A>. <P>
<I>generalized-boolean</I>---a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<P><B>Description:</B><P>
 <P>
Returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> if <I>object</I> is of the <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> specified by <I>type-specifier</I>; otherwise, returns <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>. <P>
A <I>type-specifier</I> of the form <TT>(satisfies fn)</TT> is handled by applying the function <TT>fn</TT> to <I>object</I>. <P>
 <TT>(typep </TT><I>object</I><TT> '(array </TT><I>type-specifier</I><TT>))</TT>, where <I>type-specifier</I> is not <TT>*</TT>, returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> if and only if <I>object</I> is an <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>array</I></A> that could be the result of supplying <I>type-specifier</I> as the <TT>:element-type</TT> argument to <A REL=DEFINITION HREF="f_mk_ar.htm#make-array"><B>make-array</B></A>. <TT>(array *)</TT> refers to all <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A> regardless of element type, while <TT>(array </TT><I>type-specifier</I><TT>)</TT> refers only to those <A REL=DEFINITION HREF="26_glo_a.htm#array"><I>arrays</I></A> that can result from giving <I>type-specifier</I> as the <TT>:element-type</TT> argument to <A REL=DEFINITION HREF="f_mk_ar.htm#make-array"><B>make-array</B></A>. A similar interpretation applies to <TT>(simple-array </TT><I>type-specifier</I><TT>)</TT> and <TT>(vector </TT><I>type-specifier</I><TT>)</TT>. See <A REL=CHILD HREF="15_aba.htm">Section 15.1.2.1 (Array Upgrading)</A>. <P>
<TT>(typep </TT><I>object</I><TT> '(complex </TT><I>type-specifier</I><TT>))</TT> returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> for all <A REL=DEFINITION HREF="26_glo_c.htm#complex"><I>complex</I></A> numbers that can result from giving <A REL=DEFINITION HREF="26_glo_n.htm#number"><I>numbers</I></A> of type <I>type-specifier</I> to the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="f_comp_2.htm#complex"><B>complex</B></A>, plus all other <A REL=DEFINITION HREF="26_glo_c.htm#complex"><I>complex</I></A> numbers of the same specialized representation. Both the real and the imaginary parts of any such <A REL=DEFINITION HREF="26_glo_c.htm#complex"><I>complex</I></A> number must satisfy: <P>
<PRE>
 (typep realpart 'type-specifier)
 (typep imagpart 'type-specifier)
</PRE>
</TT> <P>
See the <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> <A REL=DEFINITION HREF="f_upgrad.htm#upgraded-complex-part-type"><B>upgraded-complex-part-type</B></A>. <P>
 <P>
<P><B>Examples:</B><P>
 <P>
<PRE>
 (typep 12 'integer) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (1+ most-positive-fixnum) 'fixnum) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (typep nil t) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep nil nil) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (typep 1 '(mod 2)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep #c(1 1) '(complex (eql 1))) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
;; To understand this next example, you might need to refer to
;; <A REL=CHILD HREF="12_aec.htm">Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)</A>.
 (typep #c(0 0) '(complex (eql 0))) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
</PRE>
</TT> <P>
 Let <TT>A</TT>x<TT></TT> and <TT>A</TT>y<TT></TT> be two <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifiers</I></A> that denote different <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>types</I></A>, but for which <P>
<PRE>
 (upgraded-array-element-type 'Ax)
</PRE>
</TT> and <P>
<PRE>
 (upgraded-array-element-type 'Ay)
</PRE>
</TT> denote the same <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A>. Notice that <P>
<PRE>
 (typep (make-array 0 :element-type 'Ax) '(array Ax)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (make-array 0 :element-type 'Ay) '(array Ay)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (make-array 0 :element-type 'Ax) '(array Ay)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
 (typep (make-array 0 :element-type 'Ay) '(array Ax)) =&gt;  <A REL=DEFINITION HREF="26_glo_t.htm#true">true</A>
</PRE>
</TT> <P>
 <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B><P>
 <P>
An error of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="e_error.htm#error"><B>error</B></A> is signaled if <I>type-specifier</I> is <TT>values</TT>, or a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A> list whose first element is either <A REL=DEFINITION HREF="a_fn.htm#function"><B>function</B></A> or <A REL=DEFINITION HREF="a_values.htm#values"><B>values</B></A>. <P>
The consequences are undefined if the <I>type-specifier</I> is not a <A REL=DEFINITION HREF="26_glo_t.htm#type_specifier"><I>type specifier</I></A>. <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="f_tp_of.htm#type-of"><B>type-of</B></A>, <A REL=DEFINITION HREF="f_upgr_1.htm#upgraded-array-element-type"><B>upgraded-array-element-type</B></A>, <A REL=DEFINITION HREF="f_upgrad.htm#upgraded-complex-part-type"><B>upgraded-complex-part-type</B></A>, <A REL=CHILD HREF="04_bc.htm">Section 4.2.3 (Type Specifiers)</A> <P>
<P><B>Notes:</B><P>
 <P>
<A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>Implementations</I></A> are encouraged to recognize and optimize the case of <TT>(typep </TT><I>x</I><TT> (the class </TT><I>y</I><TT>))</TT>, since it does not involve any need for expansion of <A REL=DEFINITION HREF="m_deftp.htm#deftype"><B>deftype</B></A> information at runtime. <P>
<PRE>

</PRE>
</TT> <P>
 <P>
<P><HR>The following <A REL=META HREF="../Front/X3J13Iss.htm">X3J13 cleanup issues</A>, <I>not part of the specification</I>, apply to this section:<P><UL><LI> <A REL=CHILD HREF="../Issues/iss015.htm">ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING</A><LI> <A REL=CHILD HREF="../Issues/iss175.htm">FUNCTION-TYPE</A><LI> <A REL=CHILD HREF="../Issues/iss334.htm">SUBTYPEP-ENVIRONMENT:ADD-ARG</A><P></UL><HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
