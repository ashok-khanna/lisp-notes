<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Function LDIFF, TAILP</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="f_last.htm">
<LINK REL=UP HREF="c_conses.htm">
<LINK REL=NEXT HREF="f_nthcdr.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="f_last.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_conses.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="f_nthcdr.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="ldiff"><A NAME="tailp"><I>Function</I> <B>LDIFF, TAILP</B></A></A> <P>
<P><B>Syntax:</B><P>
 <P>

<B>ldiff</B> <I>list object</I> =&gt; <I>result-list</I><P>
 
<B>tailp</B> <I>object list</I> =&gt; <I>generalized-boolean</I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
<I>list</I>---a <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A>,  which might be a <A REL=DEFINITION HREF="26_glo_d.htm#dotted_list"><I>dotted list</I></A>. <P>
<I>object</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>.  <P>
<I>result-list</I>---a <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A>. <P>
<I>generalized-boolean</I>---a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<P><B>Description:</B><P>
 <P>
 If <I>object</I> is the <A REL=DEFINITION HREF="26_glo_s.htm#same"><I>same</I></A> as some <A REL=DEFINITION HREF="26_glo_t.htm#tail"><I>tail</I></A> of <I>list</I>, <A REL=DEFINITION HREF="#tailp"><B>tailp</B></A> returns <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A>; otherwise, it returns <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>.  <P>
If <I>object</I> is the <A REL=DEFINITION HREF="26_glo_s.htm#same"><I>same</I></A> as some <A REL=DEFINITION HREF="26_glo_t.htm#tail"><I>tail</I></A> of <I>list</I>, <A REL=DEFINITION HREF="#ldiff"><B>ldiff</B></A> returns a <A REL=DEFINITION HREF="26_glo_f.htm#fresh"><I>fresh</I></A> <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> of the <A REL=DEFINITION HREF="26_glo_e.htm#element"><I>elements</I></A> of <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> that precede <B>object</B> in the <A REL=DEFINITION HREF="26_glo_l.htm#list_structure"><I>list structure</I></A> of <I>list</I>; otherwise, it returns a <A REL=DEFINITION HREF="26_glo_c.htm#copy"><I>copy</I></A>[2] of <I>list</I>. <P>
<P><B>Examples:</B><P>
 <P>
 
<PRE>
 (let ((lists '#((a b c) (a b c . d))))
   (dotimes (i (length lists)) ()
     (let ((list (aref lists i)))
       (format t &quot;~2&amp;list=~S ~21T(tailp object list)~
                  ~44T(ldiff list object)~%&quot; list)
         (let ((objects (vector list (cddr list) (copy-list (cddr list))
                                '(f g h) '() 'd 'x)))
           (dotimes (j (length objects)) ()
             (let ((object (aref objects j)))
               (format t &quot;~&amp; object=~S ~21T~S ~44T~S&quot;
                       object (tailp object list) (ldiff list object))))))))
&gt;&gt;  
&gt;&gt;  list=(A B C)         (tailp object list)    (ldiff list object)
&gt;&gt;   object=(A B C)      T                      NIL
&gt;&gt;   object=(C)          T                      (A B)
&gt;&gt;   object=(C)          NIL                    (A B C)
&gt;&gt;   object=(F G H)      NIL                    (A B C)
&gt;&gt;   object=NIL          T                      (A B C)
&gt;&gt;   object=D            NIL                    (A B C)
&gt;&gt;   object=X            NIL                    (A B C)
&gt;&gt;  
&gt;&gt;  list=(A B C . D)     (tailp object list)    (ldiff list object)
&gt;&gt;   object=(A B C . D)  T                      NIL
&gt;&gt;   object=(C . D)      T                      (A B)
&gt;&gt;   object=(C . D)      NIL                    (A B C . D)
&gt;&gt;   object=(F G H)      NIL                    (A B C . D)
&gt;&gt;   object=NIL          NIL                    (A B C . D)
&gt;&gt;   object=D            T                      (A B C)
&gt;&gt;   object=X            NIL                    (A B C . D)
=&gt;  NIL
</PRE>
</TT>  <P>
<P><B>Side Effects:</B><P>
 <P>
Neither <A REL=DEFINITION HREF="#ldiff"><B>ldiff</B></A> nor <A REL=DEFINITION HREF="#tailp"><B>tailp</B></A> modifies either of its <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A>. <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B><P>
 <P>
 Should be prepared to signal an error of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="e_tp_err.htm#type-error"><B>type-error</B></A> if <I>list</I> is not a <A REL=DEFINITION HREF="26_glo_p.htm#proper_list"><I>proper list</I></A> or a <A REL=DEFINITION HREF="26_glo_d.htm#dotted_list"><I>dotted list</I></A>.  <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="f_set_di.htm#set-difference"><B>set-difference</B></A> <P>
<P><B>Notes:</B><P>
 <P>
If the <I>list</I> is a <A REL=DEFINITION HREF="26_glo_c.htm#circular_list"><I>circular list</I></A>, <A REL=DEFINITION HREF="#tailp"><B>tailp</B></A> will reliably <A REL=DEFINITION HREF="26_glo_y.htm#yield"><I>yield</I></A> a <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>value</I></A> only if the given <I>object</I> is in fact a <A REL=DEFINITION HREF="26_glo_t.htm#tail"><I>tail</I></A> of <I>list</I>. Otherwise, the consequences are unspecified: a given <A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>implementation</I></A> which detects the circularity must return <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>, but since an <A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>implementation</I></A> is not obliged to detect such a <A REL=DEFINITION HREF="26_glo_s.htm#situation"><I>situation</I></A>, <A REL=DEFINITION HREF="#tailp"><B>tailp</B></A> might just loop indefinitely without returning in that case. <P>
 <P>
<A REL=DEFINITION HREF="#tailp"><B>tailp</B></A> could be defined as follows: <P>
<PRE>
 (defun tailp (object list)
   (do ((list list (cdr list)))
       ((atom list) (eql list object))
      (if (eql object list)
          (return t))))
</PRE>
</TT> <P>
and <A REL=DEFINITION HREF="#ldiff"><B>ldiff</B></A> could be defined by: <P>
<PRE>
(defun ldiff (list object)
  (do ((list list (cdr list))
       (r '() (cons (car list) r)))
      ((atom list)
       (if (eql list object) (nreverse r) (nreconc r list)))
    (when (eql object list)
      (return (nreverse r)))))
</PRE>
</TT> <P>
  <P>
 <P>
<P><HR>The following <A REL=META HREF="../Front/X3J13Iss.htm">X3J13 cleanup issues</A>, <I>not part of the specification</I>, apply to this section:<P><UL><LI> <A REL=CHILD HREF="../Issues/iss344.htm">TAILP-NIL:T</A><LI> <A REL=CHILD HREF="../Issues/iss138.htm">DOTTED-LIST-ARGUMENTS:CLARIFY</A><P></UL><HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
