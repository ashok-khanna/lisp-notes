<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Macro IGNORE-ERRORS</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="m_hand_1.htm">
<LINK REL=UP HREF="c_condit.htm">
<LINK REL=NEXT HREF="m_defi_5.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="m_hand_1.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_condit.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="m_defi_5.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="ignore-errors"><I>Macro</I> <B>IGNORE-ERRORS</B></A> <P>
<P><B>Syntax:</B><P>
 <P>

<B>ignore-errors</B> <I><I>form</I><B>*</B></I> =&gt; <I><I>result</I><B>*</B></I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
<I>forms</I>---an <A REL=DEFINITION HREF="26_glo_i.htm#implicit_progn"><I>implicit progn</I></A>. <P>
<I>results</I>---In the normal situation, the <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> of the <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>forms</I></A> are returned; in the exceptional situation, two values are returned: <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> and the <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>condition</I></A>. <P>
<P><B>Description:</B><P>
 <P>
<A REL=DEFINITION HREF="#ignore-errors"><B>ignore-errors</B></A> is used to prevent <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>conditions</I></A> of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="e_error.htm#error"><B>error</B></A> from causing entry into the debugger. <P>
Specifically, <A REL=DEFINITION HREF="#ignore-errors"><B>ignore-errors</B></A> <A REL=DEFINITION HREF="26_glo_e.htm#execute"><I>executes</I></A> <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>forms</I></A> in a <A REL=DEFINITION HREF="26_glo_d.htm#dynamic_environment"><I>dynamic environment</I></A> where a <A REL=DEFINITION HREF="26_glo_h.htm#handler"><I>handler</I></A> for <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>conditions</I></A> of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="e_error.htm#error"><B>error</B></A> has been established; if invoked, it <A REL=DEFINITION HREF="26_glo_h.htm#handle"><I>handles</I></A> such <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>conditions</I></A> by returning two <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A>, <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> and the <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>condition</I></A> that was <I>signaled</I>, from the <A REL=DEFINITION HREF="#ignore-errors"><B>ignore-errors</B></A> <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>form</I></A>. <P>
If a <A REL=DEFINITION HREF="26_glo_n.htm#normal_return"><I>normal return</I></A> from the <A REL=DEFINITION HREF="26_glo_f.htm#form"><I>forms</I></A> occurs, any <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> returned are returned by <A REL=DEFINITION HREF="#ignore-errors"><B>ignore-errors</B></A>. <P>
<P><B>Examples:</B><P>
 <P>
<PRE>
 (defun load-init-file (program)
   (let ((win nil))
     (ignore-errors ;if this fails, don't enter debugger
       (load (merge-pathnames (make-pathname :name program :type :lisp)
                              (user-homedir-pathname)))
       (setq win t))
     (unless win (format t &quot;~&amp;Init file failed to load.~%&quot;))
     win))
 
 (load-init-file &quot;no-such-program&quot;)
&gt;&gt;  Init file failed to load.
NIL
</PRE>
</TT> <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B> None.
 <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="m_hand_1.htm#handler-case"><B>handler-case</B></A>, <A REL=CHILD HREF="09_a.htm">Section 9.1 (Condition System Concepts)</A> <P>
<P><B>Notes:</B><P>
 <P>
<PRE>
 (ignore-errors . forms)
</PRE>
</TT> <P>
 is equivalent to: <P>
<PRE>
 (handler-case (progn . forms)
   (error (condition) (values nil condition)))
</PRE>
</TT> <P>
Because the second return value is a <A REL=DEFINITION HREF="26_glo_c.htm#condition"><I>condition</I></A> in the exceptional case, it is common (but not required) to arrange for the second return value in the normal case to be missing or <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A> so that the two situations can be distinguished. <P>
<HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
