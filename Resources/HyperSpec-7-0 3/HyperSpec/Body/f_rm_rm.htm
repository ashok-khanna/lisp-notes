<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Function REMOVE, REMOVE-IF, REMOVE-IF-NOT...</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="f_merge.htm">
<LINK REL=UP HREF="c_sequen.htm">
<LINK REL=NEXT HREF="f_rm_dup.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="f_merge.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_sequen.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="f_rm_dup.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="remove"><A NAME="remove-if"><A NAME="remove-if-not"><A NAME="delete"><A NAME="delete-if"><A NAME="delete-if-not"><I>Function</I> <B>REMOVE, REMOVE-IF, REMOVE-IF-NOT, DELETE, DELETE-IF, DELETE-IF-NOT</B></A></A></A></A></A></A> <P>
<P><B>Syntax:</B><P>
 <P>

<B>remove</B> <I>item sequence <TT>&amp;key</TT> from-end test test-not start end count key</I> =&gt; <I>result-sequence</I><P>
 <P>

<B>remove-if</B> <I>test sequence <TT>&amp;key</TT> from-end start end count key</I> =&gt; <I>result-sequence</I><P>
 <P>

<B>remove-if-not</B> <I>test sequence <TT>&amp;key</TT> from-end start end count key</I> =&gt; <I>result-sequence</I><P>
 <P>

<B>delete</B> <I>item sequence <TT>&amp;key</TT> from-end test test-not start end count key</I> =&gt; <I>result-sequence</I><P>
 <P>

<B>delete-if</B> <I>test sequence <TT>&amp;key</TT> from-end start end count key</I> =&gt; <I>result-sequence</I><P>
 <P>

<B>delete-if-not</B> <I>test sequence <TT>&amp;key</TT> from-end start end count key</I> =&gt; <I>result-sequence</I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
<I>item</I>---an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A>. <P>
<I>sequence</I>---a <A REL=DEFINITION HREF="26_glo_p.htm#proper_sequence"><I>proper sequence</I></A>. <P>
<I>test</I>---a <A REL=DEFINITION HREF="26_glo_d.htm#designator"><I>designator</I></A> for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of one <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>argument</I></A> that returns a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<I>from-end</I>---a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. The default is <A REL=DEFINITION HREF="26_glo_f.htm#false"><I>false</I></A>. <P>
<I>test</I>---a <A REL=DEFINITION HREF="26_glo_d.htm#designator"><I>designator</I></A> for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of two <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A> that returns a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
<I>test-not</I>---a <A REL=DEFINITION HREF="26_glo_d.htm#designator"><I>designator</I></A> for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of two <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>arguments</I></A> that returns a <A REL=DEFINITION HREF="26_glo_g.htm#generalized_boolean"><I>generalized boolean</I></A>. <P>
  <I>start</I>, <I>end</I>---<A REL=DEFINITION HREF="26_glo_b.htm#bounding_index_designator"><I>bounding index designators</I></A> of <I>sequence</I>. The defaults for <I>start</I> and <I>end</I> are <TT>0</TT> and <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>, respectively.   <P>
 <I>count</I>---an <A REL=DEFINITION HREF="26_glo_i.htm#integer"><I>integer</I></A> or <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>.  The default is <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>. <P>
<I>key</I>---a <A REL=DEFINITION HREF="26_glo_d.htm#designator"><I>designator</I></A> for a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> of one argument, or <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>. <P>
<I>result-sequence</I>---a <A REL=DEFINITION HREF="26_glo_s.htm#sequence"><I>sequence</I></A>. <P>
<P><B>Description:</B><P>
 <P>
<A REL=DEFINITION HREF="#remove"><B>remove</B></A>, <A REL=DEFINITION HREF="#remove-if"><B>remove-if</B></A>, and <A REL=DEFINITION HREF="#remove-if-not"><B>remove-if-not</B></A> return a <I>sequence</I> from which the elements that <A REL=DEFINITION HREF="26_glo_s.htm#satisfy_the_test"><I>satisfy the test</I></A> have been removed. <P>
<A REL=DEFINITION HREF="#delete"><B>delete</B></A>, <A REL=DEFINITION HREF="#delete-if"><B>delete-if</B></A>, and <A REL=DEFINITION HREF="#delete-if-not"><B>delete-if-not</B></A> are like <A REL=DEFINITION HREF="#remove"><B>remove</B></A>, <A REL=DEFINITION HREF="#remove-if"><B>remove-if</B></A>, and <A REL=DEFINITION HREF="#remove-if-not"><B>remove-if-not</B></A> respectively, but they may modify <I>sequence</I>. <P>
If <I>sequence</I> is a <A REL=DEFINITION HREF="26_glo_v.htm#vector"><I>vector</I></A>, the result is a <A REL=DEFINITION HREF="26_glo_v.htm#vector"><I>vector</I></A> that has the same <A REL=DEFINITION HREF="26_glo_a.htm#actual_array_element_type"><I>actual array element type</I></A> as <I>sequence</I>. If <I>sequence</I> is a <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A>, the result is a <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A>. <P>
Supplying a <I>from-end</I> of <A REL=DEFINITION HREF="26_glo_t.htm#true"><I>true</I></A> matters only when the <I>count</I> is provided; in that case only the rightmost <I>count</I> elements <I>satisfying the test</I> are deleted. <P>
<I>Count</I>, if supplied, limits the number of elements removed or deleted; if more than <I>count</I> elements <A REL=DEFINITION HREF="26_glo_s.htm#satisfy_the_test"><I>satisfy the test</I></A>, then of these elements only the leftmost or rightmost, depending on <I>from-end</I>, are deleted or removed, as many as specified by <I>count</I>.  If <I>count</I> is supplied and negative, the behavior is as if zero had been supplied instead.  If <I>count</I> is <A REL=DEFINITION HREF="a_nil.htm#nil"><B>nil</B></A>, all matching items are affected. <P>
For all these functions, elements not removed or deleted occur in the same order in the result as they did in <I>sequence</I>. <P>
<A REL=DEFINITION HREF="#remove"><B>remove</B></A>, <A REL=DEFINITION HREF="#remove-if"><B>remove-if</B></A>, <A REL=DEFINITION HREF="#remove-if-not"><B>remove-if-not</B></A> return a <A REL=DEFINITION HREF="26_glo_s.htm#sequence"><I>sequence</I></A> of the same <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> as <I>sequence</I> that has the same elements except that those in the subsequence <A REL=DEFINITION HREF="26_glo_b.htm#bounded"><I>bounded</I></A> by <I>start</I> and <I>end</I> and <I>satisfying the test</I> have been removed. This is a non-destructive operation. If any elements need to be removed, the result will be a copy. The result of <A REL=DEFINITION HREF="#remove"><B>remove</B></A> may share with <I>sequence</I>; the result may be <A REL=DEFINITION HREF="26_glo_i.htm#identical"><I>identical</I></A> to the input <I>sequence</I> if no elements need to be removed. <P>
<A REL=DEFINITION HREF="#delete"><B>delete</B></A>, <A REL=DEFINITION HREF="#delete-if"><B>delete-if</B></A>, and <A REL=DEFINITION HREF="#delete-if-not"><B>delete-if-not</B></A> return a <A REL=DEFINITION HREF="26_glo_s.htm#sequence"><I>sequence</I></A> of the same <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> as <I>sequence</I> that has the same elements except that those in the subsequence <A REL=DEFINITION HREF="26_glo_b.htm#bounded"><I>bounded</I></A> by <I>start</I> and <I>end</I> and <I>satisfying the test</I> have been deleted. <I>Sequence</I> may be destroyed and used to construct the result; however, the result might or might not be <A REL=DEFINITION HREF="26_glo_i.htm#identical"><I>identical</I></A> to <I>sequence</I>. <P>
 <A REL=DEFINITION HREF="#delete"><B>delete</B></A>, when <I>sequence</I> is a <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A>, is permitted to <A REL=DEFINITION HREF="m_setf_.htm#setf"><B>setf</B></A> any part, <A REL=DEFINITION HREF="f_car_c.htm#car"><B>car</B></A> or <A REL=DEFINITION HREF="f_car_c.htm#cdr"><B>cdr</B></A>, of the top-level list structure in that <I>sequence</I>. When <I>sequence</I> is a <A REL=DEFINITION HREF="26_glo_v.htm#vector"><I>vector</I></A>, <A REL=DEFINITION HREF="#delete"><B>delete</B></A> is permitted to change the dimensions of the <A REL=DEFINITION HREF="26_glo_v.htm#vector"><I>vector</I></A> and to slide its elements into new positions without permuting them to produce the resulting <A REL=DEFINITION HREF="26_glo_v.htm#vector"><I>vector</I></A>. <P>
<A REL=DEFINITION HREF="#delete-if"><B>delete-if</B></A> is constrained to behave exactly as follows: <P>
<PRE>
 (delete nil sequence
             :test #'(lambda (ignore item) (funcall test item))
             ...)
</PRE>
</TT> <P>
 <P>
<P><B>Examples:</B><P>
 
<PRE>
 (remove 4 '(1 3 4 5 9)) =&gt;  (1 3 5 9)
 (remove 4 '(1 2 4 1 3 4 5)) =&gt;  (1 2 1 3 5)
 (remove 4 '(1 2 4 1 3 4 5) :count 1) =&gt;  (1 2 1 3 4 5)
 (remove 4 '(1 2 4 1 3 4 5) :count 1 :from-end t) =&gt;  (1 2 4 1 3 5)
 (remove 3 '(1 2 4 1 3 4 5) :test #'&gt;) =&gt;  (4 3 4 5)
 (setq lst '(list of four elements)) =&gt;  (LIST OF FOUR ELEMENTS)
 (setq lst2 (copy-seq lst)) =&gt;  (LIST OF FOUR ELEMENTS)
 (setq lst3 (delete 'four lst)) =&gt;  (LIST OF ELEMENTS)
 (equal lst lst2) =&gt;  <A REL=DEFINITION HREF="26_glo_f.htm#false">false</A>
 (remove-if #'oddp '(1 2 4 1 3 4 5)) =&gt;  (2 4 4)
 (remove-if #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t) 
=&gt;  (1 2 4 1 3 5)
 (remove-if-not #'evenp '(1 2 3 4 5 6 7 8 9) :count 2 :from-end t)
=&gt;  (1 2 3 4 5 6 8)
 (setq tester (list 1 2 4 1 3 4 5)) =&gt;  (1 2 4 1 3 4 5)
 (delete 4 tester) =&gt;  (1 2 1 3 5)
 (setq tester (list 1 2 4 1 3 4 5)) =&gt;  (1 2 4 1 3 4 5)
 (delete 4 tester :count 1) =&gt;  (1 2 1 3 4 5)
 (setq tester (list 1 2 4 1 3 4 5)) =&gt;  (1 2 4 1 3 4 5)
 (delete 4 tester :count 1 :from-end t) =&gt;  (1 2 4 1 3 5)
 (setq tester (list 1 2 4 1 3 4 5)) =&gt;  (1 2 4 1 3 4 5)
 (delete 3 tester :test #'&gt;) =&gt;  (4 3 4 5)
 (setq tester (list 1 2 4 1 3 4 5)) =&gt;  (1 2 4 1 3 4 5)
 (delete-if #'oddp tester) =&gt;  (2 4 4)
 (setq tester (list 1 2 4 1 3 4 5)) =&gt;  (1 2 4 1 3 4 5)
 (delete-if #'evenp tester :count 1 :from-end t) =&gt;  (1 2 4 1 3 5)    
 (setq tester (list 1 2 3 4 5 6)) =&gt;  (1 2 3 4 5 6) 
 (delete-if #'evenp tester) =&gt;  (1 3 5) 
 tester =&gt;  <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent">implementation-dependent</A>
</PRE>
</TT> <P>
 
<PRE>
 (setq foo (list 'a 'b 'c)) =&gt;  (A B C)
 (setq bar (cdr foo)) =&gt;  (B C)
 (setq foo (delete 'b foo)) =&gt;  (A C)
 bar =&gt;  ((C)) or ...
 (eq (cdr foo) (car bar)) =&gt;  T or ...
</PRE>
</TT>  <P>
<P><B>Side Effects:</B><P>
 <P>
For <A REL=DEFINITION HREF="#delete"><B>delete</B></A>, <A REL=DEFINITION HREF="#delete-if"><B>delete-if</B></A>, and <A REL=DEFINITION HREF="#delete-if-not"><B>delete-if-not</B></A>, <I>sequence</I> may be destroyed and used to construct the result. <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B><P>
 <P>
Should be prepared to signal an error of <A REL=DEFINITION HREF="26_glo_t.htm#type"><I>type</I></A> <A REL=DEFINITION HREF="e_tp_err.htm#type-error"><B>type-error</B></A> if <I>sequence</I> is not a <A REL=DEFINITION HREF="26_glo_p.htm#proper_sequence"><I>proper sequence</I></A>. <P>
<P><B>See Also:</B><P>
 <P>
 <A REL=CHILD HREF="03_ba.htm">Section 3.2.1 (Compiler Terminology)</A>,   <A REL=CHILD HREF="03_f.htm">Section 3.6 (Traversal Rules and Side Effects)</A>  <P>
<P><B>Notes:</B><P>
 <P>
If <I>sequence</I> is a <A REL=DEFINITION HREF="26_glo_v.htm#vector"><I>vector</I></A>, the result might or might not be simple, and might or might not be <A REL=DEFINITION HREF="26_glo_i.htm#identical"><I>identical</I></A> to <I>sequence</I>. <P>
 The <TT>:test-not</TT> <A REL=DEFINITION HREF="26_glo_a.htm#argument"><I>argument</I></A> is deprecated.  <P>
 The functions <A REL=DEFINITION HREF="#delete-if-not"><B>delete-if-not</B></A> and <A REL=DEFINITION HREF="#remove-if-not"><B>remove-if-not</B></A> are deprecated.  <P>
<P><HR>The following <A REL=META HREF="../Front/X3J13Iss.htm">X3J13 cleanup issues</A>, <I>not part of the specification</I>, apply to this section:<P><UL><LI> <A REL=CHILD HREF="../Issues/iss345.htm">TEST-NOT-IF-NOT:FLUSH-ALL</A><LI> <A REL=CHILD HREF="../Issues/iss240.htm">MAPPING-DESTRUCTIVE-INTERACTION:EXPLICITLY-VAGUE</A><LI> <A REL=CHILD HREF="../Issues/iss083.htm">CONSTANT-MODIFICATION:DISALLOW</A><LI> <A REL=CHILD HREF="../Issues/iss293.htm">REMF-DESTRUCTION-UNSPECIFIED:X3J13-MAR-89</A><LI> <A REL=CHILD HREF="../Issues/iss283.htm">RANGE-OF-COUNT-KEYWORD:NIL-OR-INTEGER</A><LI> <A REL=CHILD HREF="../Issues/iss284.htm">RANGE-OF-START-AND-END-PARAMETERS:INTEGER-AND-INTEGER-NIL</A><LI> <A REL=CHILD HREF="../Issues/iss332.htm">SUBSEQ-OUT-OF-BOUNDS</A><P></UL><HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
