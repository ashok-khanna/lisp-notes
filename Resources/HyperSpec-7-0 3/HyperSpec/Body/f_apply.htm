<!-- Common Lisp HyperSpec (TM), version 7.0 generated by Kent M. Pitman on Mon, 11-Apr-2005 2:31am EDT -->
<HTML>
<HEAD>
<TITLE>CLHS: Function APPLY</TITLE>
<LINK HREF="../Data/clhs.css" REL="stylesheet" TYPE="text/css" />
<META HTTP-EQUIV="Author" CONTENT="Kent M. Pitman">
<META HTTP-EQUIV="Organization" CONTENT="LispWorks Ltd.">
<LINK REL=TOP HREF="../Front/index.htm">
<LINK REL=COPYRIGHT HREF="../Front/Help.htm#Legal">
<LINK REL=DISCLAIMER HREF="../Front/Help.htm#Disclaimer">
<LINK REL=PREV HREF="c_data_a.htm">
<LINK REL=UP HREF="c_data_a.htm">
<LINK REL=NEXT HREF="m_defun.htm">
</HEAD>
<BODY>
<H1><A REV=MADE HREF="http://www.lispworks.com/"><IMG WIDTH=80 HEIGHT=65 ALT="[LISPWORKS]" SRC="../Graphics/LWSmall.gif" ALIGN=Bottom></A><A REL=TOP HREF="../Front/index.htm"><IMG WIDTH=237 HEIGHT=65 ALT="[Common Lisp HyperSpec (TM)]" SRC="../Graphics/CLHS_Sm.gif" ALIGN=Bottom></A> <A REL=PREV HREF="c_data_a.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Previous]" SRC="../Graphics/Prev.gif" ALIGN=Bottom></A><A REL=UP HREF="c_data_a.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Up]" SRC="../Graphics/Up.gif" ALIGN=Bottom></A><A REL=NEXT HREF="m_defun.htm"><IMG WIDTH=40 HEIGHT=40 ALT="[Next]" SRC="../Graphics/Next.gif" ALIGN=Bottom></A></H1>

<HR>

<A NAME="apply"><I>Function</I> <B>APPLY</B></A> <P>
<P><B>Syntax:</B><P>
 <P>

<B>apply</B> <I>function <TT>&amp;rest</TT> args+</I> =&gt; <I><I>result</I><B>*</B></I><P>
 <P>
<P><B>Arguments and Values:</B><P>
 <P>
 <I>function</I>---a <A REL=DEFINITION HREF="26_glo_f.htm#function_designator"><I>function designator</I></A>.  <P>
<I>args</I>---a <A REL=DEFINITION HREF="26_glo_s.htm#spreadable_argument_list_designator"><I>spreadable argument list designator</I></A>. <P>
<I>results</I>---the <A REL=DEFINITION HREF="26_glo_v.htm#value"><I>values</I></A> returned by <I>function</I>. <P>
<P><B>Description:</B><P>
 <P>
<A REL=DEFINITION HREF="26_glo_a.htm#apply"><I>Applies</I></A> the <I>function</I> to the <I>args</I>. <P>
 When the <I>function</I> receives its arguments via <TT>&amp;rest</TT>, it is permissible (but not required) for the <A REL=DEFINITION HREF="26_glo_i.htm#implementation"><I>implementation</I></A> to <A REL=DEFINITION HREF="26_glo_b.htm#bind"><I>bind</I></A> the <A REL=DEFINITION HREF="26_glo_r.htm#rest_parameter"><I>rest parameter</I></A> to an <A REL=DEFINITION HREF="26_glo_o.htm#object"><I>object</I></A> that shares structure with the last argument to <A REL=DEFINITION HREF="#apply"><B>apply</B></A>. Because a <A REL=DEFINITION HREF="26_glo_f.htm#function"><I>function</I></A> can neither detect whether it was called via <A REL=DEFINITION HREF="#apply"><B>apply</B></A> nor whether (if so) the last argument to <A REL=DEFINITION HREF="#apply"><B>apply</B></A> was a <A REL=DEFINITION HREF="26_glo_c.htm#constant"><I>constant</I></A>, <A REL=DEFINITION HREF="26_glo_c.htm#conforming_program"><I>conforming programs</I></A> must neither rely on the <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> structure of a <A REL=DEFINITION HREF="26_glo_r.htm#rest_list"><I>rest list</I></A> to be freshly consed, nor modify that <A REL=DEFINITION HREF="26_glo_l.htm#list"><I>list</I></A> structure.  <P>
<A REL=DEFINITION HREF="m_setf_.htm#setf"><B>setf</B></A> can be used with <A REL=DEFINITION HREF="#apply"><B>apply</B></A> in certain circumstances; see <A REL=CHILD HREF="05_abe.htm">Section 5.1.2.5 (APPLY Forms as Places)</A>. <P>
<P><B>Examples:</B><P>
 <P>
 
<PRE>
 (setq f '+) =&gt;  +
 (apply f '(1 2)) =&gt;  3
 (setq f #'-) =&gt;  #&lt;FUNCTION -&gt;
 (apply f '(1 2)) =&gt;  -1
 (apply #'max 3 5 '(2 7 3)) =&gt;  7
 (apply 'cons '((+ 2 3) 4)) =&gt;  ((+ 2 3) . 4)
 (apply #'+ '()) =&gt;  0

 (defparameter *some-list* '(a b c))
 (defun strange-test (&amp;rest x) (eq x *some-list*))
 (apply #'strange-test *some-list*) =&gt;  <A REL=DEFINITION HREF="26_glo_i.htm#implementation-dependent">implementation-dependent</A>

 (defun bad-boy (&amp;rest x) (rplacd x 'y))
 (bad-boy 'a 'b 'c) has undefined consequences.
 (apply #'bad-boy *some-list*) has undefined consequences.
</PRE>
</TT>  <P>
<PRE>
 (defun foo (size &amp;rest keys &amp;key double &amp;allow-other-keys)
   (let ((v (apply #'make-array size :allow-other-keys t keys)))
     (if double (concatenate (type-of v) v v) v)))
 (foo 4 :initial-contents '(a b c d) :double t)
    =&gt;  #(A B C D A B C D)
</PRE>
</TT> <P>
<P><B>Affected By:</B> None.
 <P>
<P><B>Exceptional Situations:</B> None.
 <P>
<P><B>See Also:</B><P>
 <P>
<A REL=DEFINITION HREF="f_funcal.htm#funcall"><B>funcall</B></A>, <A REL=DEFINITION HREF="f_fdefin.htm#fdefinition"><B>fdefinition</B></A>, <A REL=DEFINITION HREF="s_fn.htm#function"><B>function</B></A>, <A REL=CHILD HREF="03_a.htm">Section 3.1 (Evaluation)</A>, <A REL=CHILD HREF="05_abe.htm">Section 5.1.2.5 (APPLY Forms as Places)</A> <P>
<P><B>Notes:</B> None.
 <P>
<P><HR>The following <A REL=META HREF="../Front/X3J13Iss.htm">X3J13 cleanup issues</A>, <I>not part of the specification</I>, apply to this section:<P><UL><LI> <A REL=CHILD HREF="../Issues/iss297.htm">REST-LIST-ALLOCATION:MAY-SHARE</A><LI> <A REL=CHILD HREF="../Issues/iss179.htm">FUNCTION-TYPE:X3J13-MARCH-88</A><P></UL><HR>

<A REL=NAVIGATOR HREF="../Front/StartPts.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Starting Points]" SRC="../Graphics/StartPts.gif" ALIGN=Bottom></A><A REL=TOC HREF="../Front/Contents.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Contents]" SRC="../Graphics/Contents.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Master.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Index]" SRC="../Graphics/Index.gif" ALIGN=Bottom></A><A REL=INDEX HREF="../Front/X_Symbol.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Symbols]" SRC="../Graphics/Symbols.gif" ALIGN=Bottom></A><A REL=GLOSSARY HREF="../Body/26_a.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Glossary]" SRC="../Graphics/Glossary.gif" ALIGN=Bottom></A><A HREF="../Front/X3J13Iss.htm"><IMG WIDTH=80 HEIGHT=40 ALT="[Issues]" SRC="../Graphics/Issues.gif" ALIGN=Bottom></A><BR>

<A REL=COPYRIGHT HREF="../Front/Help.htm#Legal"><I>Copyright 1996-2005, LispWorks Ltd.  All rights reserved.</I></A><P>
</BODY>
</HTML>
